# Computational proof of the kernel polynomials' properties
R.<T> = ZZ[]
K = R.fraction_field()
S.<x> = K[]

# These are the kernel polynomials phi_ell(T) for all ell
KernelPoly = {
    2: x + (T^3 + 72*T^2 + 384*T - 8192)/T,
    3: x + (T^4 + 48*T^3 + 594*T^2 + 648*T - 2187)/T,
    5: x^2 + ((2*T^6 + 72*T^5 + 954*T^4 + 5456*T^3 + 11430*T^2 + 2280*T - 1250)/T)*x + (T^12 + 72*T^11 + 2214*T^10 + 38000*T^9 + 398475*T^8 + 2620272*T^7 + 10625924*T^6 + 24815808*T^5 + 27783975*T^4 + 6563080*T^3 - 4235850*T^2 - 994800*T + 278125)/T^2,
    7: x^3 + ((3*T^8 + 96*T^7 + 1290*T^6 + 9216*T^5 + 36477*T^4 + 74592*T^3 + 61026*T^2 + 4872*T - 1029)/T)*x^2 + ((3*T^16 + 192*T^15 + 5604*T^14 + 98544*T^13 + 1161222*T^12 + 9644880*T^11 + 57794304*T^10 + 251276976*T^9 + 785481921*T^8 + 1720993008*T^7 + 2517263616*T^6 + 2243188752*T^5 + 995634822*T^4 + 96142704*T^3 - 23160732*T^2 - 2220288*T + 237699)/T^2)*x + (T^24 + 96*T^23 + 4314*T^22 + 120688*T^21 + 2356521*T^20 + 34107024*T^19 + 379163974*T^18 + 3309273624*T^17 + 22976363706*T^16 + 127779180128*T^15 + 570217276530*T^14 + 2035961430336*T^13 + 5771783490473*T^12 + 12820565499504*T^11 + 21860649766074*T^10 + 27738465848072*T^9 + 24945033539370*T^8 + 14615811373632*T^7 + 4660961342254*T^6 + 372035272224*T^5 - 133282528743*T^4 - 19587742160*T^3 + 1713501090*T^2 + 205100280*T - 14806967)/T^3,
    13: x^6 + ((6*T^14 + 168*T^13 + 2274*T^12 + 19440*T^11 + 116064*T^10 + 506880*T^9 + 1651644*T^8 + 4023216*T^7 + 7222500*T^6 + 9234720*T^5 + 7875936*T^4 + 3936816*T^3 + 851502*T^2 + 18408*T - 1014)/T)*x^5 + ((15*T^28 + 840*T^27 + 23070*T^26 + 412464*T^25 + 5378331*T^24 + 54339744*T^23 + 441343836*T^22 + 2951614176*T^21 + 16520498232*T^20 + 78247621872*T^19 + 315919601868*T^18 + 1092047855232*T^17 + 3238181993202*T^16 + 8234209649088*T^15 + 17911059283620*T^14 + 33167581932000*T^13 + 51901033155738*T^12 + 67905761663904*T^11 + 73203785118540*T^10 + 63719464723968*T^9 + 43535607153816*T^8 + 22415144043888*T^7 + 8172767096700*T^6 + 1900954835520*T^5 + 227638843863*T^4 + 6099361944*T^3 - 369911442*T^2 - 9819888*T + 272259)/T^2)*x^4 + ((20*T^42 + 1680*T^41 + 69540*T^40 + 1888096*T^39 + 37767900*T^38 + 592731120*T^37 + 7590195716*T^36 + 81438328704*T^35 + 746121749016*T^34 + 5919452686976*T^33 + 41101394560200*T^32 + 251814210156288*T^31 + 1369915150149124*T^30 + 6649798357881456*T^29 + 28908561443864460*T^28 + 112855475257562720*T^27 + 396371443423892244*T^26 + 1253834489827059216*T^25 + 3573585480487682932*T^24 + 9174198569039154432*T^23 + 21194051123122012944*T^22 + 43986936034797765632*T^21 + 81820340630962664880*T^20 + 135969901826623527936*T^19 + 201044759573956765948*T^18 + 263137557482725890288*T^17 + 302933199332693049852*T^16 + 304342994480418221600*T^15 + 264234942323030450628*T^14 + 195852340022243848848*T^13 + 122031601402098091084*T^12 + 62656178352054440064*T^11 + 25816899644445547608*T^10 + 8229233377048546688*T^9 + 1922063971776128520*T^8 + 300782633877943296*T^7 + 26246847722423276*T^6 + 612485751605520*T^5 - 51514956313260*T^4 - 2156333338592*T^3 + 46527889356*T^2 + 1593107568*T - 29641924)/T^3)*x^3 + ((15*T^56 + 1680*T^55 + 92940*T^54 + 3383904*T^53 + 91158114*T^52 + 1936578000*T^51 + 33769475988*T^50 + 496757372928*T^49 + 6287597393415*T^48 + 69503698146912*T^47 + 678764703185808*T^46 + 5909901479651904*T^45 + 46214345094154548*T^44 + 326513224530129408*T^43 + 2094483000724953864*T^42 + 12247674741215166720*T^41 + 65504424925223373144*T^40 + 321297901090737835296*T^39 + 1448517190886954124792*T^38 + 6012885184761374987136*T^37 + 23013306795617097819540*T^36 + 81292428101240536740768*T^35 + 265210679743200202729392*T^34 + 799396070381165678469120*T^33 + 2226354069640985168141610*T^32 + 5727862520972248635040032*T^31 + 13606177229134907439988080*T^30 + 29817830650429709699112576*T^29 + 60218676258028622662112748*T^28 + 111913128866574686027350656*T^27 + 191053747606376987281246896*T^26 + 298966168390484186046726912*T^25 + 427728034200034026436948794*T^24 + 557798815128735682925056416*T^23 + 660702889586280955439920752*T^22 + 707850503821530550996478784*T^21 + 682587889095354715405630164*T^20 + 589059164456932523331057024*T^19 + 451846727975943863666141592*T^18 + 305593114090092622611847296*T^17 + 180466361884240418324474520*T^16 + 91962440680194080856539232*T^15 + 39848958071090985434307240*T^14 + 14412224781054891749709696*T^13 + 4245682061147038500161460*T^12 + 985099300471530928564320*T^11 + 171296888051425889590608*T^10 + 20538927342853688585856*T^9 + 1416933254107254291519*T^8 + 21808654357002678480*T^7 - 3484754900883660444*T^6 - 158943994905730656*T^5 + 3064667659651266*T^4 + 213199133505072*T^3 - 2234490755172*T^2 - 107274905088*T + 1506392823)/T^4)*x^2 + ((6*T^70 + 840*T^69 + 58170*T^68 + 2656176*T^67 + 89945532*T^66 + 2408494032*T^65 + 53102350848*T^64 + 991135805712*T^63 + 15979390622754*T^62 + 225956329280136*T^61 + 2835966165862890*T^60 + 31895176263521088*T^59 + 323937836822433918*T^58 + 2990126355624130728*T^57 + 25219055252735434038*T^56 + 195224469737660449488*T^55 + 1392399178632734587152*T^54 + 9179734132985966627568*T^53 + 56097121915869437880324*T^52 + 318513492120101552589360*T^51 + 1683736385982702040470270*T^50 + 8301000259590380745388104*T^49 + 38223642116723786436420498*T^48 + 164592772553090928665754624*T^47 + 663444586472510787373654380*T^46 + 2505337284163958060131048848*T^45 + 8868873315930836927886888900*T^44 + 29444891717319800832937735392*T^43 + 91710387627124866289718171688*T^42 + 268011782790553447231165284384*T^41 + 734868230184891435691350592368*T^40 + 1890224216797029293373621299616*T^39 + 4559614930988165206406655256980*T^38 + 10309810968660861649066853746320*T^37 + 21837859448198665163135189469300*T^36 + 43297763617134839005088290468992*T^35 + 80279175260124825319138155885516*T^34 + 139037170994880151394470053147792*T^33 + 224633875721084130754160467078956*T^32 + 338043166449893000022591886185120*T^31 + 472999170224154125264097744027792*T^30 + 614145423013352394378971678919648*T^29 + 738272380621184037229681251751128*T^28 + 819548358359041300430892114880608*T^27 + 837666963569363090813907397176828*T^26 + 785705378485857477882030696694608*T^25 + 673738874006167643515377075440340*T^24 + 525877236848935099578607798046208*T^23 + 371772745433176884077795207205390*T^22 + 236688489039505543065548376004392*T^21 + 134797649848883169193126145533794*T^20 + 68137588906891616223445966412400*T^19 + 30286002044058486527799267544956*T^18 + 11704730587357241238186994094352*T^17 + 3879075384441576526356558905328*T^16 + 1083261470458674228833763865680*T^15 + 249111129765708528429821931690*T^14 + 45696657575441780515517813736*T^13 + 6373327652910310229259640098*T^12 + 621262087328575615957454400*T^11 + 34486065608673963675810870*T^10 + 117269741776523729863368*T^9 - 111631298523647568813762*T^8 - 4775383609768290526320*T^7 + 102076145664951336192*T^6 + 9065230890100786224*T^5 - 41807278651461180*T^4 - 7970024209983888*T^3 + 39486473633958*T^2 + 3155787831144*T - 35655266790)/T^5)*x + (T^84 + 168*T^83 + 13974*T^82 + 767344*T^81 + 31293051*T^80 + 1010814288*T^79 + 26934870672*T^78 + 608864256096*T^77 + 11916147806799*T^76 + 205060174005912*T^75 + 3140670315031242*T^74 + 43230012195877008*T^73 + 539048821906773831*T^72 + 6129476757767744736*T^71 + 63912862878492016752*T^70 + 614012599012768938240*T^69 + 5456972355800182582182*T^68 + 45022754112829710484560*T^67 + 345889902322567628592976*T^66 + 2480959618945437018412416*T^65 + 16652661168580576855392414*T^64 + 104812124583867381170556304*T^63 + 619693440612286010486941056*T^62 + 3447134873297282187293263392*T^61 + 18065496890860524430334012409*T^60 + 89303965209320544945821318376*T^59 + 416842312012997641982936846958*T^58 + 1838833250481702745093873079408*T^57 + 7672114122987923218149695063349*T^56 + 30294948092060377611375590803488*T^55 + 113276362849408367870990827876112*T^54 + 401243355821576326250303920523328*T^53 + 1346845780831375328381376560834001*T^52 + 4285185586890846136439997713143752*T^51 + 12924780969106276094477014657018674*T^50 + 36957227421083488016823212490083472*T^49 + 100179886725060090371426878976995367*T^48 + 257401344889393009397447326462065024*T^47 + 626752688373998783205428181400796592*T^46 + 1445786737811329666931495478800327552*T^45 + 3158372153826440167950725022907771284*T^44 + 6530729490261045623537095068804552480*T^43 + 12774569521265459014055270154443065440*T^42 + 23622222379608905507527586192147475072*T^41 + 41261365067829905567568443465572735716*T^40 + 68018246187697679633498036193996340064*T^39 + 105712423891793829699047371306799948784*T^38 + 154721496057501114042903165873340875072*T^37 + 212983416105366682952330736121223343611*T^36 + 275355723232280547138902158450661025144*T^35 + 333817100068378467866443641932130877746*T^34 + 378813548331766730332223535408371673936*T^33 + 401602395266045780894665940242362519381*T^32 + 396896944539094333779455914304502176016*T^31 + 364771139541465200220439930551659282672*T^30 + 310924450473501912320101196075540309088*T^29 + 245061119692088469883420450642025783457*T^28 + 177997925274056241903043638115048859816*T^27 + 118694142195360101133080367716529456174*T^26 + 72352810186969082528436334275917671728*T^25 + 40121381001893600374454346045482304045*T^24 + 20126371763049751313550318028046741664*T^23 + 9074485072102881687913062821436951840*T^22 + 3649826021409787190610736559134838656*T^21 + 1297898488644688342285378644250470054*T^20 + 403701420100931005006346443935785616*T^19 + 108388364767097506956978229503833296*T^18 + 24700929178697224051281366504274176*T^17 + 4673002722994869528734285837671902*T^16 + 711238535371283750297279062241808*T^15 + 82926961630696612056092777223888*T^14 + 6753607048732509845211297922464*T^13 + 294711192801208988757200650635*T^12 - 4508371262046748061606304264*T^11 - 1330472903646292692912668022*T^10 - 49388136154814733256171824*T^9 + 1418805244519685635881243*T^8 + 124785325138094952461184*T^7 - 173429029842702243600*T^6 - 145969794064820110848*T^5 - 414413785738013217*T^4 + 99565212238708216*T^3 - 141947197981290*T^2 - 33526876393296*T + 317295487717)/T^6
}

# These are the canonical modular polynomials Phi_ell^c(T,0)
CanonModPoly = {
    2: T^3 + 48*T^2 + 768*T + 4096,
    3: T^4 + 36*T^3 + 270*T^2 + 756*T + 729,
    5: T^6 + 30*T^5 + 315*T^4 + 1300*T^3 + 1575*T^2 + 750*T + 125,
    7: T^8 + 28*T^7 + 322*T^6 + 1904*T^5 + 5915*T^4 + 8624*T^3 + 4018*T^2 + 748*T + 49,
    13: T^14 + 26*T^13 + 325*T^12 + 2548*T^11 + 13832*T^10 + 54340*T^9 + 157118*T^8 + 333580*T^7 + 509366*T^6 + 534820*T^5 + 354536*T^4 + 124852*T^3 + 15145*T^2 + 746*T + 13
}

# The following script confirms the computational claims in the Reconstruction Theorem's proof
for l in [2,3,5,7,13]:
    # First define all curve parameters
    j_0 = CanonModPoly[l]/T
    A = -3 * j_0 * (j_0 - 1728)
    B = -2 * j_0 * (j_0 - 1728)^2

    # Define the curve E, and check that it has the correct discriminant and j-invariant
    E = EllipticCurve([A,B])
    assert E.discriminant() == 2^11 * 3^5 * A * B
    assert E.j_invariant() == j_0

    # Define the kernel poly and check its degree ...
    kernel_poly = KernelPoly[l]
    deg = ceil((l-1)/2)
    assert deg == kernel_poly.degree()

    # ... and that its coefficients lie in Z[T,T^-1]
    kernel_coeffs = kernel_poly.coefficients()
    kernel_coeffs.reverse()
    assert all([T^i * kernel_coeffs[i] in R for i in range(len(kernel_coeffs))])

    # Compute the cofactor psi_ell/phi_ell and check that it is a polynomial via coercion 
    psi = E.division_polynomial(l)
    div = S(psi/kernel_poly)
    assert psi == kernel_poly * div

    # Check that the coefficients of the cofactor lie in Z[T,T^-1]
    div_coeffs = div.coefficients()
    div_coeffs.reverse()
    assert all([T^i * div_coeffs[i] in R for i in range(len(div_coeffs))])


    # Confirm that phi_ell(f) defines a kernel polynomial
    if l == 2:
        # For ell = 2, check that the unique root will be 2-torsion
        rho = -kernel_poly(x=0)
        assert rho^3 + A*rho + B == 0

    else:
        # For ell >= 3, define the rational representation of [2]
        t_1 = x^4 - 2*A*x^2 - 8*B*x + A^2
        t_2 = 4*x^3 + 4*A*x + 4*B

        # Define the polynomial h_ell by evaluating phi_ell at t_1/t_2
        eval_quot = kernel_poly(t_1/t_2)

        # We have to rescale numerator and denominator to get monic polynomials
        h = 4^deg * eval_quot.numerator()
        assert h.is_monic()

        # Confirm that the (appropriately rescaled) denominator is t_2(T)^n
        assert 4^deg * eval_quot.denominator() == t_2^deg

        # Check that h_ell is divisible by phi_ell, first over K via coercion
        g = S(h/kernel_poly)
        assert h == kernel_poly * g

        # Check that the above divisibility actually takes place over Z[T,T^-1]
        g_coeffs = g.coefficients()
        g_coeffs.reverse()
        assert all([T^i * g_coeffs[i] in R for i in range(len(g_coeffs))])


    # Next, confirm that the target j-invariant is J_ell(ell^s/f) using Kohel's formulas
    # For this, define the necessary constants to be in line with the formulas
    s = 12/gcd(l-1, 12)
    b_2 = 0
    b_4 = 2*A
    b_6 = 4*B
    n = deg

    # Compute values t and w in the even degree case (note that here we have rho from before) ...
    if l == 2:
        t = 3*rho^2 + A
        w = rho*t

    # ... and in the odd degree case
    if l >= 3:
        # Get alternating coefficients of the kernel polynomial
        s_1 = -kernel_coeffs[1]

        if l >= 5:
            s_2 = kernel_coeffs[2]
        else:
            s_2 = 0

        if l >= 7:
            s_3 = -kernel_coeffs[3]
        else:
            s_3 = 0

        # Compute t and w
        t = 6*(s_1^2 - 2*s_2) + b_2*s_1 + n*b_4
        w = 10*(s_1^3 - 3*s_1*s_2 + 3*s_3) + 2*b_2*(s_1^2 - 2*s_2) + 3*b_4*s_1 + n*b_6

    # Define the target curve and check the discriminant and j-invariant
    E_target = EllipticCurve([A - 5*t, B - b_2*t - 7*w])
    Delta = E_target.discriminant()
    assert Delta == 2^11 * 3^5 * T^(l-1) * A * B
    assert E_target.j_invariant() == j_0(T=l^s/T)


    # Finally, confirm the recovery formulas for f
    if l == 2:
        assert T == Delta/(2^11 * 3^5 * A * B)

    if l == 3:
        C = kernel_poly(x=0)
        assert T == -((2*A^2 + 7*A*C*j_0 + 3*C^3*j_0)^2/(2^8 * 3 * A^3 * j_0))

    if l == 5:
        assert T == (-48*A)^3/(kernel_poly.discriminant()^3 * j_0)

    if l == 7:
        assert T == (-48*A)^3/(kernel_poly.discriminant() * j_0)

    if l == 13:
        assert T == (2^297 * 3^135 * A^27 * B^27)/(kernel_poly.discriminant()^5 * Delta^2)

    print(f"All claims are correct for l = {l}!")